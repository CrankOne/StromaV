/*
 * Copyright (c) 2016 Renat R. Dusaev <crank@qcrypt.org>
 * Author: Renat R. Dusaev <crank@qcrypt.org>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

# if !defined(H_STROMA_V_ANALYSIS_PIPELINE_H) && !defined(SWIG)
# error "This header has to be included in analysis/pipeline.hpp or used " \
"by SWIG."
# endif

/**@class iEventSource
 * @brief Interface class for event source supporting metadata for
 *        random access.
 * 
 * Template class for event sequences supporting random access. All the 
 * `event_read_*` functions can return false upon non-critical failure as well
 * as indicate a critical error by throwing an exception.
 *
 * TODO: following thesis can be wrong:
 * This class is designed as an intermediate representation of somewhat ideal
 * "unique" event source that supports metadata indexing its own scope. It can
 * be further used as a container or manager dispatching queries among multiple
 * minor event source instances.
 * */
template<typename MetadataTypeT>
class iEventSource : public iEventSequence {
# ifndef SWIG
            static_assert( std::is_base_of<sV::aux::iMetadataTypeBase,
                                           MetadataTypeT>::value,
                "Metadata type class has to be descendant of "
                "iMetadataTypeBase." );
# endif
public:
    typedef MetadataTypeT                   MetadataType;
    typedef typename MetadataType::EventID           EventID;
    typedef typename MetadataType::SpecificMetadata  SpecificMetadata;
# ifndef SWIG
    static_assert( std::is_base_of<iMetadataType<EventID, SpecificMetadata>,
                                   MetadataType>::value,
                "Metadata type class has to implement iMetadataType "
                "interface." );
# endif
private:
    SpecificMetadata * _mDatCache;
protected:
    /// Random access read event based on provided metadata information (IF).
    virtual bool _V_event_read_single( const EventID & ) = 0;

    /// Read events in some ID range (IF).
    virtual bool _V_event_read_range( const EventID & lower,
                                      const EventID & upper ) = 0;
    /// Read events specified by set of indexes (IF with default
    /// implementation).
    virtual bool _V_event_read_list( const std::list<EventID> & list ) {
        bool res = true;
        for( auto id : list ) {
            res &= event_read_single( id );
        }
        return res;
    }
public:
    iEventSource() : _mDatCache(nullptr) {}

    virtual bool event_read_single( const EventID & eid ) {
        return _V_event_read_single(eid); }

    virtual bool event_read_range( const EventID & lower,
                                   const EventID & upper ) {
        return _V_event_read_range( lower, upper ); }

    virtual bool event_read_list( const std::list<EventID> & list ) {
        return _V_event_read_list(list); }

    /// Obtain (fetch cached or build new) metadata for itself.
    virtual const SpecificMetadata & metadata(
                                sV::MetadataDictionary<EventID> & mDict ) {
        if( !_mDatCache ) {
            const MetadataType & mdt = 
                        mDict.template get_metadata_type<SpecificMetadata>();
            _mDatCache = &( mdt.acquire_metadata( *this ) );
        }
        return *_mDatCache;
    }
};  // class iEventSource

