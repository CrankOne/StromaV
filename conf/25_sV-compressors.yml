# Copyright (c) 2016 Renat R. Dusaev <crank@qcrypt.org>
# Author: Renat R. Dusaev <crank@qcrypt.org>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

%YAML 1.2
---

# Measurements of various compression algorithms performed with NA64 data.
# Conditions: 25000 events, 39 buckets, ~25 KiB/event, from cdr01020-001481.dat.
# All algorithms were tested on their recommended parameters.
# 
# *** Absolute results (core i7-3517U, 8GiB RAM, SATA HDD)
# 
#         | encoding, usec/event  | decoding, usec/event  | Compression ratio |
# --------+-----------------------+-----------------------+-------------------|
# raw .dat|                     - |               8337.14 |                 - |
#    plain|                     - |                278.35 |                 - |
#     ZLib|               2860.39 |                355.79 |               29% |
#    BZip2|               2454.37 |                860.97 |               17% |
#     LZMA|              24223.91 |                594.11 |               83% |
# 
# 
# *** Relative results
# 
#         | enc, evs/sec | dec, evs/sec | ratio
# --------+--------------+--------------+-------
# raw .dat|            - |          120 |     -
#    plain|            - |         3595 |     -
#     ZLib|          350 |         2810 |   29%
#    BZip2|          407 |         1161 |   17%
#     LZMA|        41.28 |         1683 |   83%
# 
# *** Recommendations
# 
# LZMA gives astonishing compression ratio while being very slow at compression
# performance*. Its decompression performance is also not good. It is recommended
# for large rarely need data.
# 
# ZLib gives a reasonable compression ratio while keeping good speed. Yields a
# fastest decompression performance. We recommend it as generic purpose
# compression algorithm.
# 
# BZip2 produces poor compression ratio** while being a fastest compression
# algorithm on its default settings. It is not fairly good on decompression.
# Recommended for IPC applications.
# 
# *) LZMA speed may be increased by involving a custom pool allocator. sV
# currently does not support it.
# **) BZip2 is known to come in its full Glory with large data chunks, so it may
# demonstrate better performance/compression ration with data chunks of different
# size.

compressors:
    # Gives the best compression ratio (70%) by the highest price of
    # compression performance. The decompression is generally fast enough,
    # however consumes more RAM comparingly to other algorithms.
    lzma:
        memlimitKB: 204500
        extreme: false
        level: 6
    # Gives reasonable compression ratio (40%) with high compression
    # performance. Decompression performance is generally fast enough and
    # consumes modest resources.
    bzip2:
        blockSize100k: 5
        verbosity: 0
        workFactor: 30
        small: false
        memopt-decompression: false
    # Gives worst compression ratio (25%) with modest compression performance.
    # Consumest least amount of resources by providing fast enough
    # decompression performance. At high levels of compression (>9) may
    # spoil the compression ratio comparingly to lower levels.
    zlib:
        # Possible values are:
        #   - Z_DEFAULT_COMPRESSION [=-1, special value]
        #   - Z_BEST_SPEED          [=1]
        #   - Z_BEST_COMPRESSION    [=9]
        #   - Z_NO_COMPRESSION      [=0]
        #   - or integer levels 0-9
        level: Z_DEFAULT_COMPRESSION

