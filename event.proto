syntax = "proto3";
/*
 * Copyright (c) 2016 Renat R. Dusaev <crank@qcrypt.org>
 * Author: Renat R. Dusaev <crank@qcrypt.org>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import "google/protobuf/any.proto";
option cc_enable_arenas = true;
package sV.events;

// Event
///////

message SimulatedEvent {
    google.protobuf.Any payload = 1;
}

message ExperimentalEvent {
    google.protobuf.Any payload = 1;
}

message AssemblySummary {
    repeated DetectorSummary partialSummaries = 1;
    google.protobuf.Any assemblySummaryData = 3;
}

message DetectorSummary {
    // The type must match the AFR_DetSignature type:
    uint32 detectorID = 1;
    google.protobuf.Any summaryData = 2;
}

message Displayable {
    repeated DetectorSummary summaries = 1;
}

// The event message can bear the simulated experimental data:
message Event {
    oneof uevent {
        SimulatedEvent simulated = 1;
        ExperimentalEvent experimental = 5;
        bytes blob = 7;
    }
    Displayable displayableInfo = 8;
}

// Multicast message can either contain the steering/status message, or
// a particular event:
message MulticastMessage {
    message SenderStatusMessage {
        enum SenderStatus {
              UNKNOWN = 0;
            OPERATING = 1;
                 IDLE = 2;
          MALFUNCTION = 3;
            QUENCHING = 4;
        }
        SenderStatus senderStatus = 1;
    }

    oneof Payload {
        Event event = 1;
        SenderStatusMessage status = 2;
    }
}

//
// Basic storaging
//

message BucketInfoEntry {
    string infoType = 1;
    google.protobuf.Any suppInfo = 5;  // usually contains CommonBucketDescriptor
}

message BucketInfo {
    repeated BucketInfoEntry entries = 1;
}

message CommonBucketDescriptor {
    bytes sha256hash = 1;
    uint64 nEvents = 3;
}

message Bucket {
    repeated Event events = 3;
}

message ZLib_Parameters {
    uint32 level = 1;
}

message BZip2_Parameters {
    int32 blockSize100k = 1;
    int32 workFactor = 3; 
}

message LZMA_Parameters {
    bool extreme = 1;
    int32 level = 3;
}

message CompressedData {
    enum CompressionAlgorithm {
        plain = 0;
        other = 1;
        ZLIB = 2;
        BZIP2 = 3;
        LZMA = 4;
    }
    // Compression algorithm applied to bucket. 
    CompressionAlgorithm compressionAlgo = 1;
    // Compressed content itself.
    bytes compressedContent = 5;
    // Size of original (decompressed) content in bytes.
    uint32 originalSize = 7;
    // Compression parameters.
    oneof CompressionParameters {
        ZLib_Parameters zlib = 9;
        BZip2_Parameters bz2 = 11;
        LZMA_Parameters lzma = 13;
        google.protobuf.Any custom = 15;
    }
}

message DeflatedBucket {
    CompressedData data = 3;
}

// Misc
//////

message TestingMessage {
    string content = 1;
}

