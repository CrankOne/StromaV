syntax = "proto3";
/*
 * Copyright (c) 2016 Renat R. Dusaev <crank@qcrypt.org>
 * Author: Renat R. Dusaev <crank@qcrypt.org>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import "google/protobuf/any.proto";
option cc_enable_arenas = true;
package sV.reports;

//
// Pipeline reporting messages
/////////////////////////////

message PipelineReport {
    int32 timestamp = 1;
    SourceState sourceState = 3;
    repeated ProcessorState processorStates = 5;
    repeated LogMessage logMessages = 7;
};

message LogMessage {
    // NOTE: clamped by Goo
    enum Type {
        debug = 0;
        error = 1;
        warning = 2;
        ordinary = 3;
        info1 = 4;
        info2 = 5;
        info3 = 6;
    }
    Type type = 1;
    string text = 2;
}

message SourceState {
    int64 nRead = 1;
    int64 nMax = 2;
    string sourceName = 3;
    string sourceFormat = 5;
    google.protobuf.Any details = 15;
};

message ProcessorState {
    enum Type {
        ordinary = 0;
        payloadForcePack = 1;
        payloadPlain = 2;
        fj = 3;
    }
    Type type = 1;
    string name = 2;
    string RTTIClassID = 3;
    // Counts:
    uint64 nConsidered = 4;
    uint64 nDiscriminated = 5;
    uint64 nAborted = 6;
    uint64 nPacked = 15;  // used only for packing processors
}

